{"version":3,"sources":["HandleAPI.js","HeaderForm.js","MovieRatings.js","Watchlist.js","Details.js","MovieCard.js","ResultList.js","SearchContent.js","App.js","reportWebVitals.js","index.js"],"names":["HandleAPI","this","isLoading","query","resultCount","e","nextPageAvailable","url","text","year","type","nextPage","queryAPI","data","pageLimit","newQuery","Math","ceil","fetch","res","json","console","error","movies","Array","from","Set","map","a","imdbID","find","season","HeaderForm","props","useState","queryText","setQueryText","queryType","setQueryType","queryYear","setqueryYear","querySeason","setSeason","searchState","setState","currentYear","Date","getFullYear","initialQuery","preventDefault","onMovieChange","setQuery","Response","setSearchLimits","totalResults","uniqueList","removeDuplicates","Episodes","Search","id","onSubmit","htmlFor","className","name","placeholder","minLength","onChange","target","value","min","max","maxLength","defaultChecked","MovieRatings","movieDetails","Ratings","ratings","Value","Source","source","Watchlist","watchlist","setWatchlist","isInList","setInList","watchlistLoaded","setLoaded","modalVisible","setModal","toggleWatchlist","useEffect","storedList","localStorage","getItem","converted","JSON","parse","loadWatchlist","undefined","element","setItem","stringify","err","onClick","filter","movie","Title","Rated","Year","Genre","Runtime","concat","Details","setMovieDetails","loadingDetails","setLoading","fetchData","src","Poster","alt","Actors","Director","Production","BoxOffice","Awards","Plot","href","MovieCard","classList","focus","changeFocus","ResultList","getNextPage","length","observer","useRef","bottomOfResults","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","getLoadStatus","observe","getResultCount","ref","SearchContent","setFocus","ID","App","setMovies","newMovies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48a685cb.chunk.js","sourcesContent":["//Contain all API related functions\r\nclass HandleAPI {\r\n    static isLoading = false\r\n    static query = {\r\n        text: \"\",\r\n        year: \"\",\r\n        type: \"\",\r\n        season: \"\",\r\n        nextPage: \"\",\r\n        pageLimit: \"\",\r\n        resultCount: \"\",\r\n    }\r\n\r\n    // Return load status\r\n    static getLoadStatus () {\r\n        return this.isLoading\r\n    }\r\n\r\n    // Return result count\r\n    static getResultCount () {\r\n        return this.query.resultCount\r\n    }\r\n\r\n    // Return next page number\r\n    static getNextPage() {\r\n        return this.query.nextPage\r\n    }\r\n    static nextPageAvailable () {\r\n        return this.query.nextPage > this.query.pageLimit ? false : true\r\n    }\r\n\r\n    // Set new query values\r\n    static setQuery(newQuery) {\r\n        this.query = {...newQuery}\r\n    }\r\n\r\n    // Set number of results and available pages\r\n    static setSearchLimits (resultCount) {\r\n        this.query.resultCount = resultCount\r\n        this.query.pageLimit = Math.ceil(resultCount / 10)\r\n    }\r\n\r\n    //Query API and return response if received\r\n    static async queryAPI (url) {\r\n        this.isLoading = true\r\n        let data = []\r\n        try {\r\n            let res = await fetch(url)\r\n            data = await res.json()\r\n            this.isLoading =  false\r\n            return data\r\n        } catch(err) {\r\n            console.error(err)\r\n            this.isLoading = false\r\n            return null\r\n        }\r\n    }\r\n\r\n    // Build URL for next available page and return the data\r\n    static async getNextPage (e){\r\n        if (this.nextPageAvailable && this.isLoading === false) {\r\n            let url = `https://www.omdbapi.com/?apikey=19bc8d19&s=${this.query.text}&y=${this.query.year}&type=${this.query.type}&page=${this.query.nextPage}`\r\n            this.query.nextPage++\r\n            let data = await this.queryAPI(url)\r\n            \r\n            return data\r\n        }\r\n    }\r\n\r\n    //Remove any duplicates based on imdbID being unique\r\n\t//Function from https://dev.to/marinamosti/removing-duplicates-in-an-array-of-objects-in-js-with-sets-3fep\r\n\tstatic removeDuplicates (movies) {\r\n\t\tif (!movies) return\r\n\t\t\t\r\n\t\tconst uniqueMovies = Array.from(new Set(movies.map(a => a.imdbID)))\r\n\t\t .map(imdbID => {\r\n\t\t   return movies.find(a => a.imdbID === imdbID)\r\n\t\t })\r\n\t\t return uniqueMovies\r\n\t}\r\n}\r\n\r\nexport default HandleAPI","import React, {useState, useEffect} from \"react\";\r\nimport 'rc-slider/assets/index.css';\r\nimport HandleAPI from './HandleAPI.js';\r\n\r\nexport default function HeaderForm(props) {\r\n\r\n\t// INCOMING PROPS \r\n\t// \tmovies: Array<movie>\r\n    //  onMovieChange(newMovies) \r\n\r\n\t//Form states\r\n\tconst [queryText, setQueryText] = useState('')\r\n\tconst [queryType, setQueryType] = useState('')\r\n\tconst [queryYear, setqueryYear] = useState('')\r\n\tconst [querySeason, setSeason] = useState('')\r\n\tconst [searchState, setState] = useState('')\r\n\tconst currentYear = new Date().getFullYear()\r\n\r\n\t//Check the query and store first page of results if valid\r\n\t//If not valid, update state for result details\r\n\tconst initialQuery = async(e) => {\r\n\t\t//prevent page reload on form submission\r\n\t\te.preventDefault();\t\r\n\t\t//init variables\r\n\t\tsetState('')\r\n\t\tprops.onMovieChange([])\r\n\r\n\t\tHandleAPI.setQuery({\r\n\t\t\ttext: queryText,\r\n\t\t\tyear: queryYear,\r\n\t\t\ttype: queryType,\r\n\t\t\tseason: querySeason,\r\n\t\t\tnextPage: 2,\r\n\t\t})\r\n\r\n        let url = \"https://www.omdbapi.com/?apikey=19bc8d19&\"\r\n        url = (queryType === \"episode\") ? url + `t=${queryText}&season=${querySeason}` \r\n            : url + `s=${queryText}&y=${queryYear}&type=${queryType}&page=1`\r\n\r\n        let data = await HandleAPI.queryAPI(url)\r\n\t\t//Check search has results\r\n\t\tif (data === null || data.Response===\"False\") {\r\n\t\t\tsetState(\"failed\")\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//If successful then remove duplicates based on imdbID and set states\r\n\t\telse {\r\n\t\t\tHandleAPI.setSearchLimits(data.totalResults ? data.totalResults : 0)\r\n\t\t\tlet uniqueList = HandleAPI.removeDuplicates( queryType===\"episode\" ? data.Episodes : data.Search)\r\n\t\t\tprops.onMovieChange(uniqueList)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form id=\"search-form\" onSubmit={initialQuery}>\r\n\t\t\t\t<div id=\"form-text\">\r\n\t\t\t\t\t<label htmlFor=\"year\"><button className=\"search-label\" type=\"submit\"><i className=\"fas fa-search\"></i></button>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input className=\"text-input\" type=\"text\" \r\n\t\t\t\t\t\tname=\"year\"\r\n\t\t\t\t\t\tplaceholder=\"E.g. Parasite\"\r\n\t\t\t\t\t\tminLength=\"3\"\r\n\t\t\t\t\t\tonChange={ (e) => setQueryText(e.target.value)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id=\"form-parameters\">\r\n\t\t\t\t\t<div id=\"form-parameters-left\">\r\n\t\t\t\t\t\t{queryType !== \"episode\" \r\n\t\t\t\t\t\t? <>\t<label className=\"form-filter-label\" htmlFor=\"queryYear\">YEAR</label>\r\n\t\t\t\t\t\t\t<input className=\"year-input\" type=\"number\" name=\"queryYear\"\r\n\t\t\t\t\t\t\t\tmin=\"1880\" max={currentYear} maxLength=\"4\"  \r\n\t\t\t\t\t\t\t\tvalue={queryYear}\r\n\t\t\t\t\t\t\t\tonChange={ (e) => setqueryYear(e.target.value)} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div id=\"form-parameters-right\" onChange={ (e) => setQueryType(e.target.value)}>\r\n\t\t\t\t\t\t<label className=\"form-filter-label\" htmlFor=\"queryType\">TYPE</label>\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"\" name=\"queryType\" defaultChecked />Any\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"movie\" name=\"queryType\" />Movies\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"series\" name=\"queryType\" />Series\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"episode\" name=\"queryType\" />Episodes\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{queryType === \"episode\" \r\n\t\t\t\t\t?\t<div id=\"season-input\">\r\n\t\t\t\t\t\t\t<label className=\"form-filter-label\" htmlFor=\"querySeason\">SEASON</label>\r\n\t\t\t\t\t\t\t<input className=\"form-season\" type=\"number\" name=\"querySeason\" \r\n\t\t\t\t\t\t\t\tmin=\"1\" maxLength=\"3\" value={querySeason}\r\n\t\t\t\t\t\t\t\tonChange={ (e) => setSeason(e.target.value)} />\r\n\t\t\t\t\t\t</div> \r\n\t\t\t\t\t: null}\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <input type=\"submit\" /> */}\r\n\t\t\t</form>\r\n\t\t\t{ searchState === \"failed\" \r\n\t\t\t? \t<div id=\"search-state\">\r\n\t\t\t\t\t<p>Search failed</p>\r\n\t\t\t\t</div>\r\n\t\t\t: null\r\n\t\t\t}\r\n\t\t</>\r\n\t)\r\n}","import React from \"react\"\r\n\r\nexport default function MovieRatings (props) {\r\n\t// INCOMING PROPS\r\n\t// movieDetails: movie object\r\n\r\n\t//Wait until ratings array exists before trying to render\r\n\tif (props.movieDetails.Ratings) {\r\n\t\treturn (\r\n\t\t\t<div id=\"focused-movie--ratings\">\r\n\t\t\t\t{props.movieDetails.Ratings.map(ratings => (\r\n\t\t\t\t<div className=\"rating\" key={ratings.source}>\t\r\n\t\t\t\t\t<p>{ratings.Value}</p>\r\n\t\t\t\t\t<p>{ratings.Source}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t)\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p>Ratings not found for IMDb, Rotten Tomatoes, or Metacritic.</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}","import {React, useState, useEffect} from \"react\"\r\n\r\nexport default function Watchlist (props) {\r\n\r\n\t// INCOMING PROPS\r\n\t// movieDetails: movie object\r\n\r\n\tconst [watchlist, setWatchlist] = useState()\r\n\tconst [isInList, setInList] = useState()\r\n\tconst [watchlistLoaded, setLoaded] = useState(false)\r\n\tconst [modalVisible, setModal] = useState(false)\r\n\r\n\t//Convert JSON string to array of objects\r\n\tfunction stringToJSONArray (data) {\r\n\t\tlet obj = JSON.parse(data)\r\n\t\tlet res = []\r\n\t\tfor (let i in obj) {\r\n\t\t\tres.push(obj[i])\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t//Check if the focused movie is already in the watchlist\r\n\tfunction checkInList () {\r\n\t\tif (watchlist.find(element=> element.imdbID === props.movieDetails.imdbID) === undefined)\r\n\t\t\tsetInList(false)\r\n\t\telse\r\n\t\t\tsetInList(true)\r\n\t}\r\n\r\n\t//Check item is unique based on imdbID and add object to watchlist\r\n\tfunction addToWatchlist () {\r\n\t\tlet movie = {\r\n\t\t\tTitle: props.movieDetails.Title,\r\n\t\t\timdbID: props.movieDetails.imdbID,\r\n\t\t\tRated: props.movieDetails.Rated,\r\n\t\t\tYear: props.movieDetails.Year,\r\n\t\t\tGenre: props.movieDetails.Genre,\r\n\t\t\tRuntime: props.movieDetails.Runtime\r\n\t\t}\r\n\t\tsetWatchlist(watchlist.concat(movie))\r\n\t}\r\n\r\n\t//Remove current focused movie from watchlist\r\n\tfunction removeFromWatchlist (e) {\r\n\t\tsetWatchlist(watchlist.filter( movie => movie.imdbID !== props.movieDetails.imdbID ))\r\n\t}\r\n\t\r\n\t//Enable modal to display watchlist\r\n\tfunction toggleWatchlist () {\r\n\t\tsetModal(!modalVisible)\r\n\t}\r\n\r\n\t//Load watchlist from local storage or set to empty array\r\n\tfunction loadWatchlist () {\r\n\t\t//Check local storage first\r\n\t\tlet storedList = localStorage.getItem(\"watchlist\")\r\n\t\tif (storedList !== null) {\r\n\t\t\t//If local copy exists parse and store in state\r\n\t\t\tlet converted = JSON.parse(storedList)\r\n\t\t\tsetWatchlist(converted)\r\n\t\t} else \r\n\t\t\tsetWatchlist([])\r\n\t}\r\n\t\r\n\t// Load watchlist if load state is still false\r\n\tuseEffect(() => {\r\n\t\tif (!watchlistLoaded) {\r\n\t\t\tloadWatchlist()\r\n\t\t}\r\n\t}, [props.movieDetails])\r\n\r\n\t//Set load state to true once watchlist has been loaded\r\n\tuseEffect(() => {\r\n\t\tif (!watchlistLoaded)\r\n\t\t\tsetLoaded(true)\r\n\t}, [watchlist])\r\n\r\n\t//When watchlist or focused movie is changed, convert from JSON to string and set in local storage\r\n\tuseEffect(() => {\r\n\t\tif (!watchlistLoaded) return\r\n\t\t\r\n\t\tcheckInList()\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('watchlist', JSON.stringify(watchlist))\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err)\r\n\t\t}\r\n\t\t},[watchlist,props.movieDetails])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div id=\"watchlist-buttons\">\r\n\t\t\t\t<button className=\"watchlist-button\" onClick={toggleWatchlist}><i className=\"far fa-bookmark\"></i> View</button>\r\n\t\t\t\t{isInList \r\n\t\t\t\t\t? <button className=\"watchlist-button\" onClick={removeFromWatchlist}><i className=\"fas fa-trash-alt\"></i> Remove</button>\r\n\t\t\t\t\t: <button className=\"watchlist-button\" onClick={addToWatchlist}><i className=\"fas fa-plus\"></i> Add</button> \r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t{modalVisible ? \r\n\t\t\t\t<div id=\"watchlist-modal\">\r\n\t\t\t\t\t<h3>WATCH LIST</h3>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{watchlist.map( movie => (\r\n\t\t\t\t\t\t\t<li><strong>{movie.Title}</strong> · {movie.Rated} · {movie.Year} · {movie.Genre} · {movie.Runtime} </li>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<button className=\"watchlist-button\" onClick={toggleWatchlist}>Close</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t: null\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport HandleAPI from \"./HandleAPI.js\";\r\nimport MovieRatings from \"./MovieRatings.js\"\r\nimport Watchlist from \"./Watchlist.js\"\r\n\r\nexport default function Details(props) {\r\n\r\n\t// INCOMING PROPS\r\n\t// imdbID: String\r\n\r\n\tconst [movieDetails, setMovieDetails] = useState({})\r\n\tconst [loadingDetails, setLoading] = useState('')\r\n\r\n\t//Load specific movie details when focused movie changes\r\n\tuseEffect(() => {\r\n\t\tasync function fetchData ()  {\r\n\t\t\tif (props.imdbID !== '') {\r\n\t\t\t\tconst url = `http://www.omdbapi.com/?apikey=19bc8d19&i=${props.imdbID}`\r\n\t\t\t\tlet data = await HandleAPI.queryAPI(url)\r\n\t\t\t\tsetMovieDetails({...data})\r\n\t\t\t}\r\n\t\t\tsetLoading(false)\r\n\t\t}\r\n\t\tsetLoading(true)\r\n\t\tfetchData()\r\n\t}\r\n\t, [props.imdbID]);\r\n\r\n\t//Check a focus has been selected\r\n\tif (props.imdbID !== \"\") {\r\n\t\treturn (\r\n\t\t<div id=\"search-results-details\">\r\n\t\t\t<div id=\"focused-movie\">\r\n\t\t\t\t{loadingDetails === false ? \r\n\t\t\t\t<>\r\n\t\t\t\t\t<div id=\"focused-movie-top\">\r\n\t\t\t\t\t\t<div id=\"focused-movie--poster\">\r\n\t\t\t\t\t\t\t<img src={movieDetails.Poster} \r\n\t\t\t\t\t\t\t\talt={movieDetails.Title + \" Poster\"}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div id=\"focused-movie--details\">\r\n\t\t\t\t\t\t\t<div id=\"focused-movie-details--positioning\">\r\n\t\t\t\t\t\t\t\t<h1>{movieDetails.Title}</h1>\r\n\t\t\t\t\t\t\t\t<p><span id=\"focused-movie--rated\">{movieDetails.Rated}</span>\r\n\t\t\t\t\t\t\t\t<span>{movieDetails.Year} · {movieDetails.Genre} · {movieDetails.Runtime}</span></p>\r\n\t\t\t\t\t\t\t\t<p><strong>Stars:</strong> {movieDetails.Actors}</p>\r\n\t\t\t\t\t\t\t\t<p><strong>Director:</strong> {movieDetails.Director}</p>\r\n\t\t\t\t\t\t\t\t<p><strong>Production:</strong> {movieDetails.Production}</p>\r\n\t\t\t\t\t\t\t\t<p><strong>Gross USA:</strong> {movieDetails.BoxOffice}</p>\r\n\t\t\t\t\t\t\t\t<p>{movieDetails.Awards}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t<div id=\"focused-movie--plot\">\r\n\t\t\t\t\t\t<p>{movieDetails.Plot}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t<MovieRatings movieDetails={movieDetails}/>\r\n\t\t\t\t\t<Watchlist movieDetails={movieDetails}/>\r\n\t\t\t\t</> \r\n\t\t\t\t:\t<div id=\"details--loading\">\r\n\t\t\t\t\t\t<h3>Loading movie</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n\t}\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div id=\"search-results-details\">\r\n\t\t\t\t<h3 className=\"search-result-details--info\">SEARCH INFO</h3>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Type</th>\r\n\t\t\t\t\t\t\t<th>Description</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Any</td>\r\n\t\t\t\t\t\t\t<td>Searches for any movie, series, video game</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Movies</td>\r\n\t\t\t\t\t\t\t<td>Searches only for movies</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Series</td>\r\n\t\t\t\t\t\t\t<td>Searches only for a TV series. A series will only appear for the years where it started and/or ended</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Episodes</td>\r\n\t\t\t\t\t\t\t<td>Returns a list of episodes a matching season and TV show. Must enter a season number for this search.</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<h3 className=\"search-result-details--info\">WATCHLIST</h3>\r\n\t\t\t\t<p>After an item has been selected it can be added to a watchlist using buttons on the top right corner of the window. The watchlist is stored offline in local storage and will persist after the page has been closed.</p>\r\n                        \r\n\t\t\t\t<p id=\"search-result-details--API-link\">Powered by <a href=\"http://www.omdbapi.com/\">OMDb API</a></p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React from \"react\"\r\n\r\nexport default function MovieCard(props){\r\n\r\n\t//INCOMING PROPS\r\n\t// \tmovies: Array<movie>\r\n\t// focus: String\r\n\t// changeFocus()\r\n\r\n\tlet classList = (props.focus === props.movie.imdbID) ? \"movieCard activeCard\" : \"movieCard\"\r\n\r\n\treturn (\r\n\t\t<div className={classList} \r\n\t\t\tkey={props.movie.imdbID}\r\n\t\t\tonClick={ () => props.changeFocus(props.movie.imdbID)\r\n\t\t} >\r\n\t\t\t<div className=\"movieCard--poster\">\r\n\t\t\t\t{props.movie.Poster \r\n\t\t\t\t\t? <img\r\n\t\t\t\t\t\tsrc={props.movie.Poster}\r\n\t\t\t\t\t\talt={props.movie.Title + \" poster\"}\r\n\t\t\t\t\t/> \r\n\t\t\t\t\t: null}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t<div className=\"movieCard--details\">\r\n\t\t\t\t<h3 className=\"movieCard--title\">{props.movie.Title}</h3>\r\n\t\t\t\t<p>{props.movie.Year}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useRef, useCallback, useState} from \"react\";\r\nimport HandleAPI from \"./HandleAPI.js\";\r\nimport MovieCard from \"./MovieCard.js\"\r\n\r\nexport default function ResultList(props) {\r\n\r\n\t// INCOMING PROPS\r\n\t// focus: string (unique imdb ID)\r\n\t// movies: Array<movie>\r\n    // onMovieChange(newMovies) \r\n\t// changeFocus(ID)\r\n\r\n\t//Retrieve next page of results if it exists\r\n\tconst getNextPage = async(e) => {\r\n\t\tlet data = await HandleAPI.getNextPage()\r\n\t\tif (data && data.Search.length > 0) {\r\n\t\t\tlet uniqueList = HandleAPI.removeDuplicates(props.movies.concat(data.Search))\r\n\t\t\tprops.onMovieChange(uniqueList)\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Init observer\r\n\tconst observer = useRef()\r\n\tconst bottomOfResults = useCallback(node => {\r\n\t\tif (observer.current) observer.current.disconnect()\r\n\t\tobserver.current = new IntersectionObserver(entries => {\r\n\t\t\t//Fetch next page if available and div appears on screen (bottom of page is reached)\r\n\t\t\tif (entries[0].isIntersecting && HandleAPI.nextPageAvailable() === true) {\r\n\t\t\t\tif (HandleAPI.getLoadStatus() === false) {\r\n\t\t\t\t\tgetNextPage()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\t//if node exists then set observer\r\n\t\tif (node) observer.current.observe(node)\r\n\t}, [props.movies])\r\n\r\n\t//only render if movies exist in props\r\n\tif (props.movies && props.movies.length > 0) {\r\n\t\treturn (\r\n\t\t\t<div id=\"search-results-list\">\r\n\t\t\t\t<div id=\"search-results--counter\">\r\n\t\t\t\t\t<p>{props.movies.length} {HandleAPI.getResultCount() !== 0 ? <span> / {HandleAPI.getResultCount()}</span> : null}  RESULTS</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{props.movies.map(movie => (\r\n\t\t\t\t\t<MovieCard movie={movie} focus={props.focus} changeFocus={props.changeFocus}/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t<div id=\"search-results--bottom\" ref={bottomOfResults}>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t} \r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div id=\"search-results-list\">\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport Details from './Details.js'\r\nimport ResultList from './ResultList.js'\r\nimport HandleAPI from './HandleAPI.js'\r\n\r\nexport default function SearchContent(props) {\r\n\r\n\t// INCOMING PROPS\r\n\t// \tmovies: Array<movie>\r\n    //  onMovieChange(newMovies) \r\n\r\n\tconst [focus, setFocus] = useState('')\r\n\r\n\tfunction changeFocus(ID) {\r\n\t\tsetFocus(ID)\r\n\t}\r\n\r\n\t//Clear current focus if a new search is made\r\n\tuseEffect( () => {\r\n\t\tif (props.movies.length === 0)\r\n\t\tsetFocus(\"\") \r\n\t}\r\n\t\t, [props.movies])\r\n\r\n\treturn (\r\n\t\t<div id=\"search-results\">\r\n\t\t\t<ResultList focus={focus}\r\n\t\t\t\t\t\tmovies={props.movies}\r\n\t\t\t\t\t\tonMovieChange={props.onMovieChange}\r\n\t\t\t\t\t\tchangeFocus={changeFocus}/>\r\n\t\t\t<Details imdbID={focus}/>\r\n\t\t</div>\r\n\t)\r\n}","import './App.css';\nimport {React , useState} from \"react\"\nimport HeaderForm from './HeaderForm.js'\nimport SearchContent from './SearchContent.js'\n\nfunction App() {\n  const [movies, setMovies] = useState([])\n\n  //Set value of movies function. Used by child components\n  function onMovieChange(newMovies) {\n    setMovies(newMovies)\n  }\n  \n  return (\n    <div className=\"App\">\n        <HeaderForm \n          movies={movies} \n          onMovieChange={onMovieChange}\n        />\n        <SearchContent\n          movies={movies}\n          onMovieChange={onMovieChange}\n        />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}