{"version":3,"sources":["MovieRatings.js","Watchlist.js","Details.js","MovieCard.js","ResultList.js","SearchContent.js","HeaderForm.js","App.js","reportWebVitals.js","index.js"],"names":["MovieRatings","props","movieDetails","Ratings","id","map","ratings","className","Value","Source","Watchlist","useState","watchlist","setWatchlist","isInList","setInList","watchlistLoaded","setLoaded","useEffect","storedlist","localStorage","getItem","data","obj","JSON","parse","res","i","push","stringToJSONArray","undefined","find","element","imdbID","setItem","stringify","err","console","error","onClick","log","e","filter","movie","Title","Rated","Year","Genre","Runtime","concat","Details","setMovieDetails","a","url","fetch","json","fetchData","src","Poster","alt","Actors","Director","Production","BoxOffice","Awards","Plot","MovieCard","classList","focus","changeFocus","ResultList","observer","useRef","bottomOfResults","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","nextPage","pageLimit","getNextPage","observe","movies","length","resultCount","ref","SearchContent","setFocus","ID","HeaderForm","queryText","setQueryText","queryType","setQueryType","queryYear","setqueryYear","querySeason","setSeason","currentYear","Date","getFullYear","setMovies","setNextPage","setPageLimit","setResultCount","searchState","setState","removeDuplicates","Array","from","Set","queryAPI","preventDefault","Response","totalResults","Math","ceil","Episodes","Search","onSubmit","htmlFor","type","name","placeholder","onChange","target","value","min","max","maxLength","defaultChecked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9a8fd8e.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default function MovieRatings (props) {\r\n\r\n\t//Wait until ratings array exists before trying to render\r\n\tif (props.movieDetails.Ratings) {\r\n\t\treturn (\r\n\t\t\t<div id=\"focused-movie--ratings\">\r\n\t\t\t\t{props.movieDetails.Ratings.map(ratings => (\r\n\t\t\t\t<div className=\"rating\">\t\r\n\t\t\t\t\t<p>{ratings.Value}</p>\r\n\t\t\t\t\t<p>{ratings.Source}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t)\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p>Ratings not found for IMDb, Rotten Tomatoes, or Metacritic.</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}","import {React, useState, useEffect} from \"react\"\r\n\r\nexport default function Watchlist (props) {\r\n\tconst [watchlist, setWatchlist] = useState()\r\n\tconst [isInList, setInList] = useState()\r\n\tconst [watchlistLoaded, setLoaded] = useState(false)\r\n\r\n\r\n\t//Convert JSON string to array of objects\r\n\tfunction stringToJSONArray (data) {\r\n\t\tlet obj = JSON.parse(data)\r\n\t\tlet res = []\r\n\t\tfor (let i in obj) {\r\n\t\t\tres.push(obj[i])\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t//Check if the focused movie is already in the watchlist\r\n\tfunction checkInList () {\r\n\t\tif (watchlist.find(element=> element.imdbID === props.movieDetails.imdbID) === undefined)\r\n\t\t\tsetInList(false)\r\n\t\telse\r\n\t\t\tsetInList(true)\r\n\t}\r\n\r\n\t//Check item is unique based on imdbID and add object to watchlist\r\n\tfunction addToWatchlist () {\r\n\t\tlet movie = {\r\n\t\t\tTitle: props.movieDetails.Title,\r\n\t\t\timdbID: props.movieDetails.imdbID,\r\n\t\t\tRated: props.movieDetails.Rated,\r\n\t\t\tYear: props.movieDetails.Year,\r\n\t\t\tGenre: props.movieDetails.Genre,\r\n\t\t\tRuntime: props.movieDetails.Runtime\r\n\t\t}\r\n\t\tsetWatchlist(watchlist.concat(movie))\r\n\t}\r\n\r\n\t//Remove current focused movie from watchlist\r\n\tfunction removeFromWatchlist (e) {\r\n\t\tsetWatchlist(watchlist.filter( movie => movie.imdbID !== props.movieDetails.imdbID ))\r\n\t}\r\n\r\n\tfunction showWatchlist () {\r\n\t\tconsole.log(watchlist)\r\n\t}\r\n\r\n\t/* If watchlist has not been loaded yet, check localstorage first\r\n\tif local storage is empty then set watchlist to [] & set state to loaded\r\n\tif local storage is not empty then load from localstorage & set state to loaded */\r\n\tuseEffect(() => {\r\n\t\tif (!watchlistLoaded) {\r\n\t\t\tlet storedlist = localStorage.getItem(\"watchlist\")\r\n\t\t\tsetLoaded(true)\r\n\t\t\tif (storedlist !== null && storedlist !== \"undefined\") {\r\n\t\t\t\tsetWatchlist(stringToJSONArray(localStorage.getItem(\"watchlist\")))\r\n\t\t\t} else {\r\n\t\t\t\tsetWatchlist([])\r\n\t\t\t}\r\n\t\t}\r\n\t}, [watchlist, props.movieDetails])\r\n\r\n\t//When watchlist or focused movie is changed, convert from JSON to string and set in local storage\r\n\tuseEffect(() => {\r\n\t\tif (watchlist) checkInList()\r\n\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('watchlist', JSON.stringify(watchlist))\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err)\r\n\t\t}\r\n\t\t},[watchlist,props.movieDetails])\r\n\r\n\treturn (\r\n\t\t<div id=\"watchlist-buttons\">\r\n\t\t\t<button className=\"watchlist-button\" onClick={showWatchlist}><i className=\"far fa-bookmark\"></i> View</button>\r\n\t\t\t{isInList \r\n\t\t\t\t? <button className=\"watchlist-button\" onClick={removeFromWatchlist}><i className=\"far fa-bookmark\"></i> Remove</button>\r\n\t\t\t\t: <button className=\"watchlist-button\" onClick={addToWatchlist}><i className=\"fas fa-plus\"></i> Add</button> \r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport MovieRatings from \"./MovieRatings.js\"\r\nimport Watchlist from \"./Watchlist.js\"\r\nexport default function Details(props) {\r\n\r\n\r\n\tconst [movieDetails, setMovieDetails] = useState({})\r\n\tuseEffect(() => {\r\n\t\tasync function fetchData ()  {\r\n\t\t\tif (props.imdbID !== '') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst url = `http://www.omdbapi.com/?apikey=19bc8d19&i=${props.imdbID}`\r\n\t\t\t\t\tlet res = await fetch(url)\r\n\t\t\t\t\tlet data = await res.json()\r\n\t\t\t\t\tsetMovieDetails({...data})\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.error(err)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfetchData()\r\n\t}\r\n\t, [props.imdbID]);\r\n\r\n\t//Check a focus has been selected\r\n\tif (props.imdbID !== \"\") {\r\n\t\treturn (\r\n\t\t\t<div id=\"focused-movie\">\r\n\t\t\t\t<div id=\"focused-movie-top\">\r\n\t\t\t\t\t<div id=\"focused-movie--poster\">\r\n\t\t\t\t\t\t<img src={movieDetails.Poster} \r\n\t\t\t\t\t\t\talt={movieDetails.Title + \" Poster\"}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div id=\"focused-movie--details\">\r\n\t\t\t\t\t\t<div id=\"position\">\r\n\t\t\t\t\t\t\t<h1>{movieDetails.Title}</h1>\r\n\t\t\t\t\t\t\t<p><span id=\"focused-movie--rated\">{movieDetails.Rated}</span>\r\n\t\t\t\t\t\t\t<span>{movieDetails.Year} · {movieDetails.Genre} · {movieDetails.Runtime}</span></p>\r\n\t\t\t\t\t\t\t<p><strong>Stars:</strong> {movieDetails.Actors}</p>\r\n\t\t\t\t\t\t\t<p><strong>Director:</strong> {movieDetails.Director}</p>\r\n\t\t\t\t\t\t\t<p><strong>Production:</strong> {movieDetails.Production}</p>\r\n\t\t\t\t\t\t\t<p><strong>Gross USA:</strong> {movieDetails.BoxOffice}</p>\r\n\t\t\t\t\t\t\t<p>{movieDetails.Awards}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<div id=\"focused-movie--plot\">\r\n\t\t\t\t\t<p>{movieDetails.Plot}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<MovieRatings movieDetails={movieDetails}/>\r\n\t\t\t\t<Watchlist movieDetails={movieDetails}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\tSearch guide: \r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React from \"react\"\r\n\r\nexport default function MovieCard(props){\r\n\r\n\tlet classList = (props.focus === props.movie.imdbID) ? \"movieCard activeCard\" : \"movieCard\"\r\n\r\n\treturn (\r\n\t\t<div className={classList} \r\n\t\t\tkey={props.movie.imdbID}\r\n\t\t\tonClick={ () => props.changeFocus(props.movie.imdbID)\r\n\t\t} >\r\n\t\t\t<div className=\"movieCard--poster\">\r\n\t\t\t\t{props.movie.Poster \r\n\t\t\t\t\t? <img\r\n\t\t\t\t\t\tsrc={props.movie.Poster}\r\n\t\t\t\t\t\talt={props.movie.Title + \" poster\"}\r\n\t\t\t\t\t/> \r\n\t\t\t\t\t: null}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t<div className=\"movieCard--details\">\r\n\t\t\t\t<h3 className=\"movieCard--title\">{props.movie.Title}</h3>\r\n\t\t\t\t<p>{props.movie.Year}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useRef, useCallback} from \"react\";\r\nimport MovieCard from \"./MovieCard.js\"\r\nexport default function ResultList(props) {\r\n\r\n\t//Init observer\r\n\tconst observer = useRef()\r\n\tconst bottomOfResults = useCallback(node => {\r\n\t\tif (observer.current) observer.current.disconnect()\r\n\t\tobserver.current = new IntersectionObserver(entries => {\r\n\t\t\t//Fetch next page if available and div appears on screen (bottom of page is reached)\r\n\t\t\tif (entries[0].isIntersecting && props.nextPage < props.pageLimit) {\r\n\t\t\t\tprops.getNextPage()\r\n\t\t\t}\r\n\t\t})\r\n\t\t//if node exists then set observer\r\n\t\tif (node) observer.current.observe(node)\r\n\t}, [props.pageLimit, props.nextPage])\r\n\r\n\t//only render if movies exist in props\r\n\tif (props.movies && props.movies.length > 0) {\r\n\t\treturn (\r\n\t\t\t<div id=\"search-results-list\">\r\n\t\t\t\t<div id=\"search-results--counter\">\r\n\t\t\t\t\t<p>{props.movies.length} {props.resultCount ? <span> / {props.resultCount}</span> : null}  RESULTS</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{props.movies.map(movie => (\r\n\t\t\t\t\t<MovieCard movie={movie} focus={props.focus} changeFocus={props.changeFocus}/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t<div id=\"search-results--bottom\" ref={bottomOfResults}>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t} \r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div id=\"search-results-list\">\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, {useState} from \"react\";\r\nimport Details from './Details.js'\r\nimport ResultList from './ResultList.js'\r\n\r\nexport default function SearchContent(props) {\r\n\r\n\tconst [focus, setFocus] = useState('')\r\n\r\n\tfunction changeFocus(ID) {\r\n\t\tsetFocus(ID)\r\n\t}\r\n\treturn (\r\n\t\t<div id=\"search-results\">\r\n\t\t\t<ResultList pageLimit={props.pageLimit} nextPage={props.nextPage} focus={focus}\r\n\t\t\t\tresultCount={props.resultCount} movies={props.movies}\r\n\t\t\t\tgetNextPage={props.getNextPage} changeFocus={changeFocus}/>\r\n\r\n\t\t\t<div id=\"search-results-details\">\r\n\t\t\t\t<Details imdbID={focus}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport SearchContent from './SearchContent.js'\r\nimport 'rc-slider/assets/index.css';\r\n\r\nexport default function HeaderForm() {\r\n\r\n\t//Form states\r\n\tconst [queryText, setQueryText] = useState('')\r\n\tconst [queryType, setQueryType] = useState('')\r\n\tconst [queryYear, setqueryYear] = useState('')\r\n\tconst [querySeason, setSeason] = useState('')\r\n\tconst currentYear = new Date().getFullYear()\r\n\r\n\t//Result states\r\n\tconst [movies, setMovies] = useState([])\r\n\tconst [nextPage, setNextPage] = useState(1)\r\n\tconst [pageLimit, setPageLimit] = useState(1)\r\n\tconst [resultCount, setResultCount] = useState(-1)\r\n\tconst [searchState, setState] = useState('')\r\n\r\n\t//Remove any duplicates based on imdbID being unique\r\n\t//Function from https://dev.to/marinamosti/removing-duplicates-in-an-array-of-objects-in-js-with-sets-3fep\r\n\tfunction removeDuplicates (movies) {\r\n\t\tif (!movies) return\r\n\t\t\t\r\n\t\tconst uniqueMovies = Array.from(new Set(movies.map(a => a.imdbID)))\r\n\t\t .map(imdbID => {\r\n\t\t   return movies.find(a => a.imdbID === imdbID)\r\n\t\t })\r\n\t\t return uniqueMovies\r\n\t}\r\n\r\n\t//Check the query and store first page of results if valid\r\n\t//If not valid, update state for result details\r\n\tconst queryAPI = async(e) => {\r\n\t\t//prevent page reload on form submission\r\n\t\te.preventDefault();\t\r\n\r\n\t\t//init variables\r\n\t\tsetState('')\r\n\t\tsetMovies([])\r\n\t\tsetPageLimit(1)\r\n\r\n\t\tlet data = {}\r\n\t\tlet url\r\n\t\ttry {\r\n\t\t\t//Submit different query format\r\n\t\t\tif (queryType === \"episode\") {\r\n\t\t\t\turl = `https://www.omdbapi.com/?apikey=19bc8d19&t=${queryText}&season=${querySeason}`\r\n\t\t\t} else url = `https://www.omdbapi.com/?apikey=19bc8d19&s=${queryText}&y=${queryYear}&type=${queryType}&page=1`\r\n\r\n\t\t\tlet res = await fetch(url)\r\n\t\t\tdata = await res.json()\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err)\r\n\t\t}\r\n\r\n\t\t//Check search has results\r\n\t\tif (data.Response===\"False\") {\r\n\t\t\t//TODO: Set flag for bad query\r\n\t\t\tsetState(\"failed\")\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//Process results and set pageLimit\r\n\t\telse {\r\n\t\t\tsetResultCount(data.totalResults)\r\n\t\t\tsetPageLimit( Math.ceil(data.totalResults / 10))\r\n\t\t\tsetMovies(removeDuplicates( queryType===\"episode\" ? data.Episodes : data.Search))\r\n\t\t\tsetNextPage(2)\r\n\t\t}\r\n\t}\r\n\r\n\t//Retrieve next page of results if it exists\r\n\tconst getNextPage = async(e) => {\r\n\t\tlet data = {}\r\n\t\tif (nextPage > pageLimit) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst url = `https://www.omdbapi.com/?apikey=19bc8d19&s=${queryText}&y=${queryYear}&type=${queryType}&page=${nextPage}`\r\n\t\t\tlet res = await fetch(url)\r\n\t\t\tdata = await res.json()\r\n\t\t\tsetMovies(removeDuplicates(movies.concat(data.Search)))\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err)\r\n\t\t}\r\n\t\tsetNextPage(nextPage + 1)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form className=\"form\" onSubmit={queryAPI}>\r\n\t\t\t\t<div id=\"form-text\">\r\n\t\t\t\t\t<label className=\"search-label\" htmlFor=\"year\"><i className=\"fas fa-search\"></i></label>\r\n\t\t\t\t\t<input className=\"text-input\" type=\"text\" \r\n\t\t\t\t\t\tname=\"year\"\r\n\t\t\t\t\t\tplaceholder=\"E.g. Parasite\"\r\n\t\t\t\t\t\tonChange={ (e) => setQueryText(e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id=\"form-parameters\">\r\n\t\t\t\t\t<div id=\"form-parameters-left\">\r\n\t\t\t\t\t\t{queryType !== \"episode\" \r\n\t\t\t\t\t\t? <>\t<label className=\"label-filter\" htmlFor=\"queryYear\">YEAR</label>\r\n\t\t\t\t\t\t\t<input className=\"year-input\" type=\"number\" name=\"queryYear\"\r\n\t\t\t\t\t\t\t\tmin=\"1880\" max={currentYear} maxLength=\"4\"  \r\n\t\t\t\t\t\t\t\tvalue={queryYear}\r\n\t\t\t\t\t\t\t\tonChange={ (e) => setqueryYear(e.target.value)} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div id=\"form-parameters-right\" onChange={ (e) => setQueryType(e.target.value)}>\r\n\t\t\t\t\t\t<label className=\"label-filter\" htmlFor=\"queryType\">TYPE</label>\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"\" name=\"queryType\" defaultChecked />Any\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"movie\" name=\"queryType\" />Movies\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"series\" name=\"queryType\" />Series\r\n\t\t\t\t\t\t<input type=\"radio\" value=\"episode\" name=\"queryType\" />Episodes\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{queryType === \"episode\" \r\n\t\t\t\t\t?\t<div id=\"season-input\">\r\n\t\t\t\t\t\t\t<label className=\"label-filter\" htmlFor=\"querySeason\">SEASON</label>\r\n\t\t\t\t\t\t\t<input className=\"form-season\" type=\"number\" name=\"querySeason\" \r\n\t\t\t\t\t\t\t\tmin=\"1\" maxLength=\"3\" value={querySeason}\r\n\t\t\t\t\t\t\t\tonChange={ (e) => setSeason(e.target.value)} />\r\n\t\t\t\t\t\t</div> \r\n\t\t\t\t\t: null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<input type=\"submit\" id=\"form--submit\"/>\r\n\t\t\t</form>\r\n\t\t\t<SearchContent pageLimit={pageLimit} nextPage={nextPage} resultCount={resultCount} movies={movies} getNextPage={getNextPage}/>\r\n\t\t\t{ searchState === \"failed\" \r\n\t\t\t? \t<div id=\"search-state\">\r\n\t\t\t\t\t<p>Search failed</p>\r\n\t\t\t\t</div>\r\n\t\t\t: null\r\n\t\t\t}\r\n\t\t</>\r\n\t)\r\n}","import './App.css';\nimport HeaderForm from './HeaderForm.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n        <HeaderForm />\n        \n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}